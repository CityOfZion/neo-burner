{"ast":null,"code":"var _jsxFileName = \"/home/fet/nwd/neo-burner/src/App.js\";\nimport React, { Component } from 'react';\nimport { MemoryRouter, Switch, Route } from 'react-router';\nimport AppMain from './components/Ui/Main/Main';\nimport InstallerMain from './components/Installer/Main';\nimport worker from './app.worker.js';\nimport WebWorker from './WebWorker'; // import util from 'util'\n\nimport './App.css';\n\nconst electron = window.require('electron');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      users: [],\n      isSorting: false,\n      systemConfig: {}\n    };\n  }\n\n  componentWillMount() {\n    let self = this;\n    electron.ipcRenderer.on('check-install-reply', function (event, arg) {\n      // console.log('Got installer message. systemConfig is ' + arg)\n      self.setState({\n        systemConfig: arg\n      });\n    });\n    electron.ipcRenderer.send('check-install');\n    electron.ipcRenderer.on('update-console-buffer', function (event, arg) {\n      console.log('updating console buffer');\n      self.state.systemConfig.consoleBuffer.push(arg);\n      self.setState({\n        systemConfig: {\n          consoleBuffer: self.state.systemConfig.consoleBuffer\n        }\n      });\n    });\n    electron.ipcRenderer.send('setup-event-manager');\n  }\n\n  componentDidMount() {\n    this.worker = new WebWorker(worker);\n    this.worker.addEventListener('message', event => {\n      const sortedList = event.data;\n      this.setState({\n        users: sortedList\n      });\n    }); // let self = this\n    //\n    // electron.ipcRenderer.on('check-install-reply', function (event, arg) {\n    //   // console.log('Got installer message. systemConfig is ' + arg)\n    //\n    //   self.setState({ systemConfig: arg })\n    // })\n    //\n    // electron.ipcRenderer.send('check-install')\n    //\n    // electron.ipcRenderer.on('update-console-buffer', function (event, arg) {\n    //   console.log('updating console buffer')\n    //   self.state.systemConfig.consoleBuffer.push(arg)\n    //   self.setState({ systemConfig: { consoleBuffer: self.state.systemConfig.consoleBuffer } })\n    // })\n    //\n    // electron.ipcRenderer.send('setup-event-manager')\n  }\n\n  handleSort() {\n    this.worker.postMessage(this.state.users);\n  }\n\n  render() {\n    if (this.state.systemConfig && this.state.systemConfig.isFirstRun === true) {\n      console.log('redirecting to installer');\n      return React.createElement(MemoryRouter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Route, {\n        render: props => React.createElement(InstallerMain, Object.assign({}, props, {\n          config: this.state.systemConfig,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })));\n    }\n\n    return (// <Main rightPaneContent={rightPaneContent} footerContent={footerContent} />\n      React.createElement(MemoryRouter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(Route, {\n        render: props => React.createElement(AppMain, Object.assign({}, props, {\n          config: this.state.systemConfig,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      })))\n    );\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/fet/nwd/neo-burner/src/App.js"],"names":["React","Component","MemoryRouter","Switch","Route","AppMain","InstallerMain","worker","WebWorker","electron","window","require","App","constructor","props","state","isLoading","users","isSorting","systemConfig","componentWillMount","self","ipcRenderer","on","event","arg","setState","send","console","log","consoleBuffer","push","componentDidMount","addEventListener","sortedList","data","handleSort","postMessage","render","isFirstRun"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { MemoryRouter, Switch, Route  } from 'react-router'\n\nimport AppMain from './components/Ui/Main/Main'\nimport InstallerMain from './components/Installer/Main'\n\nimport worker from './app.worker.js'\nimport WebWorker from './WebWorker'\n\n// import util from 'util'\n\nimport './App.css'\n\nconst electron = window.require('electron')\n\nclass App extends Component {\n  constructor(props) {\n      super(props)\n\n      this.state = {\n          isLoading: true,\n          users: [],\n          isSorting: false,\n          systemConfig: {\n\n          }\n      }\n  }\n\n  componentWillMount() {\n    let self = this\n\n    electron.ipcRenderer.on('check-install-reply', function (event, arg) {\n      // console.log('Got installer message. systemConfig is ' + arg)\n\n      self.setState({ systemConfig: arg })\n    })\n\n    electron.ipcRenderer.send('check-install')\n\n    electron.ipcRenderer.on('update-console-buffer', function (event, arg) {\n      console.log('updating console buffer')\n      self.state.systemConfig.consoleBuffer.push(arg)\n      self.setState({ systemConfig: { consoleBuffer: self.state.systemConfig.consoleBuffer } })\n    })\n\n    electron.ipcRenderer.send('setup-event-manager')\n  }\n\n  componentDidMount() {\n    this.worker = new WebWorker(worker)\n\n    this.worker.addEventListener('message', event => {\n        const sortedList = event.data\n        this.setState({\n            users: sortedList\n        })\n    })\n\n    // let self = this\n    //\n    // electron.ipcRenderer.on('check-install-reply', function (event, arg) {\n    //   // console.log('Got installer message. systemConfig is ' + arg)\n    //\n    //   self.setState({ systemConfig: arg })\n    // })\n    //\n    // electron.ipcRenderer.send('check-install')\n    //\n    // electron.ipcRenderer.on('update-console-buffer', function (event, arg) {\n    //   console.log('updating console buffer')\n    //   self.state.systemConfig.consoleBuffer.push(arg)\n    //   self.setState({ systemConfig: { consoleBuffer: self.state.systemConfig.consoleBuffer } })\n    // })\n    //\n    // electron.ipcRenderer.send('setup-event-manager')\n  }\n\n  handleSort() {\n      this.worker.postMessage(this.state.users)\n  }\n\n  render() {\n    if (this.state.systemConfig && this.state.systemConfig.isFirstRun === true) {\n      console.log('redirecting to installer')\n\n      return (\n        <MemoryRouter>\n          <Switch>\n          <Route render={(props) => <InstallerMain {...props} config={this.state.systemConfig} />} />\n          </Switch>\n        </MemoryRouter>\n      )\n    }\n\n    return (\n      // <Main rightPaneContent={rightPaneContent} footerContent={footerContent} />\n\n      <MemoryRouter>\n        <Switch>\n        <Route render={(props) => <AppMain {...props} config={this.state.systemConfig} />} />\n        </Switch>\n      </MemoryRouter>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}