{"ast":null,"code":"var _jsxFileName = \"/home/fet/nwd/neo-burner/src/components/App/Wallets.js\";\nimport React, { Component } from 'react';\nimport { Jumbotron, Button, Form, FormGroup, Input, Container, ButtonGroup } from 'reactstrap';\nimport FlashButton from '../Ui/FlashButton/FlashButton';\nimport util from 'util';\n\nconst electron = window.require('electron');\n\nclass Wallets extends Component {\n  constructor(props) {\n    super(props);\n    this.goToAccounts = this.goToAccounts.bind(this);\n    this.setFolder = this.setFolder.bind(this);\n    this.createPdf = this.createPdf.bind(this);\n    this.viewPdf = this.viewPdf.bind(this);\n    this.customizePdf = this.customizePdf.bind(this); // this.currentModalBody = this.currentModalBody.bind(this)\n    // TODO Refactor state/prop management\n\n    this.state = {\n      folder: '',\n      filename: 'wallets.pdf',\n      templateFoler: this.props.templateFolder,\n      generatingPdf: false,\n      pdfExists: false,\n      currentModal: '',\n      nextButtonText: 'Next',\n      nextModalClick: '',\n      cancelButtonText: 'Cancel',\n      cancelModalClick: '',\n      modalBody: ''\n    };\n  }\n\n  componentDidMount() {\n    // console.log('accountsPath: '+util.inspect(this.props.config, {depth: null}))\n    console.log('templateFolder: ' + this.props.templateFolder);\n    this.setState({\n      folder: this.props.folder,\n      pdfExists: this.props.pdfExists\n    });\n    electron.ipcRenderer.on('pdf-created', (event, arg) => {\n      console.log('ipc pdf-created');\n      this.props.setPdfPath(this.state.folder + '/', this.state.filename);\n      this.setState({\n        generatingPdf: false,\n        pdfExists: true\n      });\n      this.props.history.push('Wallets');\n    });\n  }\n\n  goToAccounts() {\n    this.props.history.push('Accounts');\n  }\n\n  setFolder(e) {\n    this.setState({\n      folder: document.getElementsByTagName('input')[0].files[0].path\n    });\n    this.props.setFolder(document.getElementsByTagName('input')[0].files[0].path);\n  }\n\n  createPdf() {\n    this.setState({\n      generatingPdf: true\n    });\n    this.props.history.push('Wallets'); // this.props.history.push('PDF')\n\n    window.ipcRenderer.send('create-pdf', {\n      pdfPath: this.state.folder + '/',\n      filename: this.state.filename,\n      templateFolder: this.props.templateFolder,\n      data: this.props.accounts\n    });\n    console.log('wallet folder: ' + this.state.folder + '/' + this.state.filename);\n  }\n\n  viewPdf() {\n    this.props.history.push('PDF');\n  }\n\n  customizePdf() {\n    this.props.history.push('DownloadHtmlTemplate');\n  }\n\n  nextModal() {\n    console.log('nextClick');\n  }\n\n  render() {\n    if (this.props.accounts.length) {\n      console.log('got ' + this.props.accounts.length + ' accounts');\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        className: \"vertical-center\",\n        id: \"ma\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container hero-container text-center\",\n        id: \"ma\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"display-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Wallets \"), React.createElement(\"p\", {\n        className: \"lead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Found \", this.props.accounts.length, \" accounts.\"), React.createElement(\"hr\", {\n        className: \"my-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"lead mx-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Container, {\n        className: \"p-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Form, {\n        id: \"accountsFormLeft\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"upload_button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        directory: \"\",\n        webkitdirectory: \"\",\n        type: \"file\",\n        id: \"ma\",\n        onChange: e => this.setFolder(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        class: \"btn btn-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Choose Wallet PDF Path\"), ' ' + this.state.folder)), React.createElement(Input, {\n        style: {\n          width: \"400px\"\n        },\n        type: \"text\",\n        name: \"text\",\n        placeholder: \"File Name\",\n        value: this.state.filename,\n        onChange: e => this.setState({\n          filename: e.target.value\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(ButtonGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(FlashButton, {\n        buttonLabel: \"Create PDF\",\n        title: 'Burn Notice',\n        message: 'Please wait while a PDF containing ' + this.props.accounts.length + ' wallets is being generated at ' + this.state.folder + '/' + this.state.filename,\n        open: this.state.generatingPdf,\n        onClick: this.createPdf,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.customizePdf,\n        color: \"warning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Set Template Path\"), ' ', React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), this.state.pdfExists ? React.createElement(Button, {\n        onClick: this.viewPdf,\n        color: \"warning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"View PDF\") : '')))))));\n    } else {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        className: \"vertical-center\",\n        id: \"ma\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container hero-container text-center\",\n        id: \"ma\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"display-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Wallets \"), React.createElement(\"p\", {\n        className: \"lead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Found \", this.props.accounts.length, \" accounts.\"), React.createElement(\"hr\", {\n        className: \"my-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"lead mx-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.goToAccounts,\n        color: \"warning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Go To Accounts\"))));\n    }\n  }\n\n}\n\nexport default Wallets; // <UploadHtmlTemplateModal config={this.props.config} folder={this.props.folder} />\n// <DownloadHtmlTemplateModal config={this.props.config} folder={this.props.folder} />","map":{"version":3,"sources":["/home/fet/nwd/neo-burner/src/components/App/Wallets.js"],"names":["React","Component","Jumbotron","Button","Form","FormGroup","Input","Container","ButtonGroup","FlashButton","util","electron","window","require","Wallets","constructor","props","goToAccounts","bind","setFolder","createPdf","viewPdf","customizePdf","state","folder","filename","templateFoler","templateFolder","generatingPdf","pdfExists","currentModal","nextButtonText","nextModalClick","cancelButtonText","cancelModalClick","modalBody","componentDidMount","console","log","setState","ipcRenderer","on","event","arg","setPdfPath","history","push","e","document","getElementsByTagName","files","path","send","pdfPath","data","accounts","nextModal","render","length","width","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Jumbotron, Button, Form, FormGroup, Input, Container, ButtonGroup } from 'reactstrap'\nimport FlashButton from '../Ui/FlashButton/FlashButton'\n\nimport util from 'util'\n\nconst electron = window.require('electron')\n\nclass Wallets extends Component {\n  constructor(props) {\n    super(props)\n\n    this.goToAccounts = this.goToAccounts.bind(this)\n    this.setFolder = this.setFolder.bind(this)\n    this.createPdf = this.createPdf.bind(this)\n    this.viewPdf = this.viewPdf.bind(this)\n    this.customizePdf = this.customizePdf.bind(this)\n    // this.currentModalBody = this.currentModalBody.bind(this)\n\n    // TODO Refactor state/prop management\n\n    this.state = {\n      folder: '',\n      filename: 'wallets.pdf',\n      templateFoler: this.props.templateFolder,\n      generatingPdf: false,\n      pdfExists: false,\n      currentModal: '',\n      nextButtonText: 'Next',\n      nextModalClick: '',\n      cancelButtonText: 'Cancel',\n      cancelModalClick: '',\n      modalBody: ''\n    }\n  }\n\n  componentDidMount() {\n    // console.log('accountsPath: '+util.inspect(this.props.config, {depth: null}))\n    console.log('templateFolder: '+this.props.templateFolder)\n    this.setState({ folder: this.props.folder, pdfExists: this.props.pdfExists })\n\n    electron.ipcRenderer.on('pdf-created', (event, arg) => {\n      console.log('ipc pdf-created')\n      this.props.setPdfPath(this.state.folder+'/', this.state.filename)\n      this.setState({\n        generatingPdf: false,\n        pdfExists: true\n      })\n      this.props.history.push('Wallets')\n    })\n  }\n\n  goToAccounts() {\n    this.props.history.push('Accounts')\n  }\n\n  setFolder(e) {\n    this.setState({ folder: document.getElementsByTagName('input')[0].files[0].path })\n    this.props.setFolder(document.getElementsByTagName('input')[0].files[0].path)\n  }\n\n  createPdf() {\n    this.setState({ generatingPdf: true })\n    this.props.history.push('Wallets')\n    // this.props.history.push('PDF')\n    window.ipcRenderer.send('create-pdf', { pdfPath: this.state.folder+'/', filename: this.state.filename, templateFolder: this.props.templateFolder, data: this.props.accounts })\n    console.log('wallet folder: '+this.state.folder+'/'+this.state.filename)\n  }\n\n  viewPdf() {\n    this.props.history.push('PDF')\n  }\n\n  customizePdf() {\n    this.props.history.push('DownloadHtmlTemplate')\n  }\n\n  nextModal() {\n    console.log('nextClick')\n  }\n\n\n  render() {\n    if (this.props.accounts.length) {\n      console.log('got '+this.props.accounts.length+' accounts')\n      return(\n        <React.Fragment>\n          <Jumbotron className=\"vertical-center\" id=\"ma\">\n          <div className=\"container hero-container text-center\" id=\"ma\">\n            <h1 className=\"display-4\">Wallets </h1>\n            <p className=\"lead\">Found {this.props.accounts.length} accounts.</p>\n            <hr className=\"my-4\" />\n            <p className=\"lead mx-auto\">\n              <Container className=\"p-5\">\n                <Form id=\"accountsFormLeft\">\n                  <FormGroup>\n                    <div id=\"upload_button\">\n                      <label>\n                        <input directory=\"\" webkitdirectory=\"\" type=\"file\" id=\"ma\"\n                          onChange={e => this.setFolder(e)}\n                          />\n                        <span class=\"btn btn-primary\">Choose Wallet PDF Path</span>\n                        {' '+this.state.folder}\n                      </label>\n                    </div>\n                    <Input\n                      style={{width: \"400px\"}}\n                      type=\"text\"\n                      name=\"text\"\n                      placeholder=\"File Name\"\n                      value={this.state.filename}\n                      onChange={e => this.setState({ filename: e.target.value })}\n                    />\n                  </FormGroup>\n                  <ButtonGroup>\n                  <FlashButton buttonLabel='Create PDF' title={'Burn Notice'} message={'Please wait while a PDF containing '+this.props.accounts.length+' wallets is being generated at '+this.state.folder+'/'+this.state.filename} open={this.state.generatingPdf} onClick={this.createPdf}/>\n\n                  <Button onClick={this.customizePdf} color=\"warning\" >Set Template Path</Button>\n                  {' '}\n                  <br/>\n                  {this.state.pdfExists ? <Button onClick={this.viewPdf} color=\"warning\" >View PDF</Button> : ''}\n                  </ButtonGroup>\n                </Form>\n              </Container>\n            </p>\n          </div>\n          </Jumbotron>\n        </React.Fragment>\n      )\n    } else {\n      return(\n        <React.Fragment>\n          <Jumbotron className=\"vertical-center\" id=\"ma\">\n          <div className=\"container hero-container text-center\" id=\"ma\">\n            <h1 className=\"display-4\">Wallets </h1>\n            <p className=\"lead\">Found {this.props.accounts.length} accounts.</p>\n            <hr className=\"my-4\" />\n            <p className=\"lead mx-auto\">\n            </p>\n            <Button onClick={this.goToAccounts} color=\"warning\" >Go To Accounts</Button>\n          </div>\n          </Jumbotron>\n        </React.Fragment>\n      )\n    }\n  }\n}\nexport default Wallets\n// <UploadHtmlTemplateModal config={this.props.config} folder={this.props.folder} />\n// <DownloadHtmlTemplateModal config={this.props.config} folder={this.props.folder} />\n"]},"metadata":{},"sourceType":"module"}