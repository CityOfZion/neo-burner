{"ast":null,"code":"// accounts.js\n// Generate 'n' Neo Smart Economy accounts and store them to accounts.json.\n// node accounts n\n// accounts.json format\nconst fs = require('fs');\n\nconst util = require('util');\n\nconst _require = require(\"@cityofzion/neon-js\"),\n      Neon = _require.default,\n      wallet = _require.wallet,\n      api = _require.api,\n      rpc = _require.rpc;\n\nconst bip39 = require('bip39'); // We don't actually need to specifiy a network until it comes time to invoke some asset transfers.\n// This is just a placeholder and FOR EDUCATIONAL PURPOSES\n\n\nconst NETWORK = \"TestNet\"; // or \"TestNet\"\n\nconst apiProvider = new api.neoscan.instance( // \"https://api.neoscan.io/api/main_net\"\n\"https://neoscan-testnet.io/api/test_net\");\nconst provider = new api.neoscan.instance(\"TestNet\");\nexport function generateAccounts(amount, name, url) {\n  if (!name) name = 'Neo-Burner Event';\n  if (!url) url = 'Neo-Burner URL';\n  let AMOUNT = amount;\n  if (!AMOUNT) AMOUNT = 2;\n  let accounts = [];\n  let bip39Mnemonic;\n\n  for (let a = 0; a < AMOUNT; a++) {\n    let result = '';\n    result = new wallet.Account(wallet.generatePrivateKey());\n    console.log('\\nCreated wallet!: ' + util.inspect(result, {\n      depth: null\n    }));\n    console.log('WIF: ' + result.WIF);\n    bip39Mnemonic = bip39.entropyToMnemonic(result._privateKey);\n    console.log('BIP-39 Mnemonic: \\n' + bip39Mnemonic);\n    let reversedPK = bip39.mnemonicToEntropy(bip39Mnemonic);\n    console.log('Mnemonic Reversed Back to PK: \\n' + reversedPK); //     if (PK.toLowerCase() !== reversedPK.toLowerCase()) {\n    //       console.log('Seed did not reverse to private key. Please try again.')\n    //       console.log('Got: \\n'+reversedPK+' and should have been: \\n'+PK)\n    //       return\n    //     }\n\n    accounts.push({\n      name: name,\n      url: url,\n      address: result._address,\n      // maintain compatibility with the rest of AG's work\n      pk: result._privateKey,\n      // maintain compatibility with the rest of AG's work\n      _address: result._address,\n      _privateKey: result._privateKey,\n      _publicKey: result._publicKey,\n      _scriptHash: result._scriptHash,\n      _WIF: result.WIF,\n      _bip39: bip39Mnemonic,\n      _bip39Verify: reversedPK\n    });\n    iterate(accounts, ''); // fs.writeFileSync(\"./data/accounts.json\", JSON.stringify(accounts).toString())\n  }\n\n  return accounts;\n}\n\nfunction iterate(obj, stack) {\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      if (typeof obj[property] == \"object\") {\n        iterate(obj[property], stack + '.' + property);\n      } else {\n        console.log(property + \"  \" + obj[property]);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/home/fet/nwd/neo-burner/src/neo-paper/accounts.js"],"names":["fs","require","util","Neon","default","wallet","api","rpc","bip39","NETWORK","apiProvider","neoscan","instance","provider","generateAccounts","amount","name","url","AMOUNT","accounts","bip39Mnemonic","a","result","Account","generatePrivateKey","console","log","inspect","depth","WIF","entropyToMnemonic","_privateKey","reversedPK","mnemonicToEntropy","push","address","_address","pk","_publicKey","_scriptHash","_WIF","_bip39","_bip39Verify","iterate","obj","stack","property","hasOwnProperty"],"mappings":"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","sourcesContent":["// accounts.js\n\n// Generate 'n' Neo Smart Economy accounts and store them to accounts.json.\n// node accounts n\n\n// accounts.json format\n\n\nconst fs = require('fs')\nconst util = require('util')\nconst { default: Neon, wallet, api, rpc } = require(\"@cityofzion/neon-js\")\nconst bip39 = require('bip39')\n\n// We don't actually need to specifiy a network until it comes time to invoke some asset transfers.\n// This is just a placeholder and FOR EDUCATIONAL PURPOSES\nconst NETWORK = \"TestNet\" // or \"TestNet\"\nconst apiProvider = new api.neoscan.instance(\n  // \"https://api.neoscan.io/api/main_net\"\n  \"https://neoscan-testnet.io/api/test_net\"\n)\n\nconst provider = new api.neoscan.instance(\"TestNet\")\n\nexport function generateAccounts (amount, name, url) {\n\n  if (!name) name = 'Neo-Burner Event'\n  if (!url) url = 'Neo-Burner URL'\n\n  let AMOUNT = amount\n  if (!AMOUNT) AMOUNT=2\n\n  let accounts = []\n  let bip39Mnemonic\n\n  for (let a=0; a<AMOUNT; a++) {\n\n    let result = ''\n\n    result = new wallet.Account(wallet.generatePrivateKey())\n\n    console.log('\\nCreated wallet!: '+util.inspect(result, {depth: null}))\n    console.log('WIF: '+result.WIF)\n\n    bip39Mnemonic = bip39.entropyToMnemonic(result._privateKey)\n    console.log('BIP-39 Mnemonic: \\n'+bip39Mnemonic)\n\n    let reversedPK = bip39.mnemonicToEntropy(bip39Mnemonic)\n    console.log('Mnemonic Reversed Back to PK: \\n'+reversedPK)\n\n    //     if (PK.toLowerCase() !== reversedPK.toLowerCase()) {\n    //       console.log('Seed did not reverse to private key. Please try again.')\n    //       console.log('Got: \\n'+reversedPK+' and should have been: \\n'+PK)\n    //       return\n    //     }\n\n    accounts.push({\n      name: name,\n      url: url,\n      address: result._address, // maintain compatibility with the rest of AG's work\n      pk: result._privateKey,   // maintain compatibility with the rest of AG's work\n      _address:result._address,\n      _privateKey: result._privateKey,\n      _publicKey: result._publicKey,\n      _scriptHash: result._scriptHash,\n      _WIF: result.WIF,\n      _bip39: bip39Mnemonic,\n      _bip39Verify: reversedPK\n    })\n\n    iterate(accounts, '')\n    // fs.writeFileSync(\"./data/accounts.json\", JSON.stringify(accounts).toString())\n  }\n  return accounts\n}\n\nfunction iterate(obj, stack) {\n  for (var property in obj) {\n    if (obj.hasOwnProperty(property)) {\n      if (typeof obj[property] == \"object\") {\n        iterate(obj[property], stack + '.' + property)\n      } else {\n        console.log(property + \"  \" + obj[property])\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}