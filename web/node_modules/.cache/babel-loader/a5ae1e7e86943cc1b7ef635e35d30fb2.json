{"ast":null,"code":"var _jsxFileName = \"/home/fet/nwd/neo-burner/src/App.js\";\nimport React, { Component } from 'react';\nimport { MemoryRouter, Switch, Route } from 'react-router';\nimport AppMain from './components/Ui/Main/Main';\nimport InstallerMain from './components/Installer/Main';\nimport worker from './app.worker.js';\nimport WebWorker from './WebWorker'; // import util from 'util'\n\nimport './App.css';\n\nconst electron = window.require('electron');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      users: [],\n      isSorting: false,\n      systemConfig: {}\n    };\n  }\n\n  componentWillMount() {\n    let self = this;\n    electron.ipcRenderer.on('check-install-reply', function (event, arg) {\n      self.setState({\n        systemConfig: arg\n      });\n      console.log('userData :' + arg.userData);\n    });\n    electron.ipcRenderer.send('check-install');\n    electron.ipcRenderer.on('update-console-buffer', function (event, arg) {\n      console.log('updating console buffer'); // self.state.systemConfig.consoleBuffer.push(arg)\n      // self.setState({ systemConfig: { consoleBuffer: self.state.systemConfig.consoleBuffer } })\n    });\n    electron.ipcRenderer.send('setup-event-manager');\n  }\n\n  componentDidMount() {\n    this.worker = new WebWorker(worker);\n    this.worker.addEventListener('message', event => {\n      const sortedList = event.data;\n      this.setState({\n        users: sortedList\n      });\n    });\n  }\n\n  handleSort() {\n    this.worker.postMessage(this.state.users);\n  }\n\n  render() {\n    // if (this.state.systemConfig && this.state.systemConfig.isFirstRun === true) {\n    //   console.log('redirecting to installer')\n    //\n    //   return (\n    //     <MemoryRouter>\n    //       <Switch>\n    //       <Route render={(props) => <InstallerMain {...props} config={this.state.systemConfig} />} />\n    //       </Switch>\n    //     </MemoryRouter>\n    //   )\n    // }\n    return (// <Main rightPaneContent={rightPaneContent} footerContent={footerContent} />\n      React.createElement(MemoryRouter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(Route, {\n        render: props => React.createElement(AppMain, Object.assign({}, props, {\n          config: this.state.systemConfig,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })))\n    );\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/fet/nwd/neo-burner/src/App.js"],"names":["React","Component","MemoryRouter","Switch","Route","AppMain","InstallerMain","worker","WebWorker","electron","window","require","App","constructor","props","state","isLoading","users","isSorting","systemConfig","componentWillMount","self","ipcRenderer","on","event","arg","setState","console","log","userData","send","componentDidMount","addEventListener","sortedList","data","handleSort","postMessage","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,EAAuBC,MAAvB,EAA+BC,KAA/B,QAA6C,cAA7C;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;;AAEA,OAAO,WAAP;;AAEA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,OAAP,CAAe,UAAf,CAAjB;;AAEA,MAAMC,GAAN,SAAkBX,SAAlB,CAA4B;AAC1BY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,IADF;AAETC,MAAAA,KAAK,EAAE,EAFE;AAGTC,MAAAA,SAAS,EAAE,KAHF;AAITC,MAAAA,YAAY,EAAE;AAJL,KAAb;AAQH;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,QAAIC,IAAI,GAAG,IAAX;AAEAZ,IAAAA,QAAQ,CAACa,WAAT,CAAqBC,EAArB,CAAwB,qBAAxB,EAA+C,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AACnEJ,MAAAA,IAAI,CAACK,QAAL,CAAc;AAAEP,QAAAA,YAAY,EAAEM;AAAhB,OAAd;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAaH,GAAG,CAACI,QAA7B;AACD,KAHD;AAKApB,IAAAA,QAAQ,CAACa,WAAT,CAAqBQ,IAArB,CAA0B,eAA1B;AAEArB,IAAAA,QAAQ,CAACa,WAAT,CAAqBC,EAArB,CAAwB,uBAAxB,EAAiD,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AACrEE,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EADqE,CAErE;AACA;AACD,KAJD;AAMAnB,IAAAA,QAAQ,CAACa,WAAT,CAAqBQ,IAArB,CAA0B,qBAA1B;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKxB,MAAL,GAAc,IAAIC,SAAJ,CAAcD,MAAd,CAAd;AAEA,SAAKA,MAAL,CAAYyB,gBAAZ,CAA6B,SAA7B,EAAwCR,KAAK,IAAI;AAC7C,YAAMS,UAAU,GAAGT,KAAK,CAACU,IAAzB;AACA,WAAKR,QAAL,CAAc;AACVT,QAAAA,KAAK,EAAEgB;AADG,OAAd;AAGH,KALD;AAMD;;AAEDE,EAAAA,UAAU,GAAG;AACT,SAAK5B,MAAL,CAAY6B,WAAZ,CAAwB,KAAKrB,KAAL,CAAWE,KAAnC;AACH;;AAEDoB,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,WACE;AAEA,0BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAO,QAAA,MAAM,EAAGvB,KAAD,IAAW,oBAAC,OAAD,oBAAaA,KAAb;AAAoB,UAAA,MAAM,EAAE,KAAKC,KAAL,CAAWI,YAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CADF;AAHF;AASD;;AAtEyB;;AAyE5B,eAAeP,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport { MemoryRouter, Switch, Route  } from 'react-router'\n\nimport AppMain from './components/Ui/Main/Main'\nimport InstallerMain from './components/Installer/Main'\n\nimport worker from './app.worker.js'\nimport WebWorker from './WebWorker'\n\n// import util from 'util'\n\nimport './App.css'\n\nconst electron = window.require('electron')\n\nclass App extends Component {\n  constructor(props) {\n      super(props)\n\n      this.state = {\n          isLoading: true,\n          users: [],\n          isSorting: false,\n          systemConfig: {\n\n          }\n      }\n  }\n\n  componentWillMount() {\n    let self = this\n\n    electron.ipcRenderer.on('check-install-reply', function (event, arg) {\n      self.setState({ systemConfig: arg })\n      console.log('userData :'+arg.userData)\n    })\n\n    electron.ipcRenderer.send('check-install')\n\n    electron.ipcRenderer.on('update-console-buffer', function (event, arg) {\n      console.log('updating console buffer')\n      // self.state.systemConfig.consoleBuffer.push(arg)\n      // self.setState({ systemConfig: { consoleBuffer: self.state.systemConfig.consoleBuffer } })\n    })\n\n    electron.ipcRenderer.send('setup-event-manager')\n  }\n\n  componentDidMount() {\n    this.worker = new WebWorker(worker)\n\n    this.worker.addEventListener('message', event => {\n        const sortedList = event.data\n        this.setState({\n            users: sortedList\n        })\n    })\n  }\n\n  handleSort() {\n      this.worker.postMessage(this.state.users)\n  }\n\n  render() {\n    // if (this.state.systemConfig && this.state.systemConfig.isFirstRun === true) {\n    //   console.log('redirecting to installer')\n    //\n    //   return (\n    //     <MemoryRouter>\n    //       <Switch>\n    //       <Route render={(props) => <InstallerMain {...props} config={this.state.systemConfig} />} />\n    //       </Switch>\n    //     </MemoryRouter>\n    //   )\n    // }\n\n    return (\n      // <Main rightPaneContent={rightPaneContent} footerContent={footerContent} />\n\n      <MemoryRouter>\n        <Switch>\n        <Route render={(props) => <AppMain {...props} config={this.state.systemConfig} />} />\n        </Switch>\n      </MemoryRouter>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}