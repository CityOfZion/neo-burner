{"ast":null,"code":"\"use strict\";\n\nvar Readable = require('stream').Readable;\n\nvar QR = require('./qr-base').QR;\n\nvar png = require('./png');\n\nvar vector = require('./vector');\n\nvar fn_noop = function () {};\n\nvar BITMAP_OPTIONS = {\n  parse_url: false,\n  ec_level: 'M',\n  size: 5,\n  margin: 4,\n  customize: null\n};\nvar VECTOR_OPTIONS = {\n  parse_url: false,\n  ec_level: 'M',\n  margin: 1,\n  size: 0\n};\n\nfunction get_options(options, force_type) {\n  if (typeof options === 'string') {\n    options = {\n      'ec_level': options\n    };\n  } else {\n    options = options || {};\n  }\n\n  var _options = {\n    type: String(force_type || options.type || 'png').toLowerCase()\n  };\n  var defaults = _options.type == 'png' ? BITMAP_OPTIONS : VECTOR_OPTIONS;\n\n  for (var k in defaults) {\n    _options[k] = k in options ? options[k] : defaults[k];\n  }\n\n  return _options;\n}\n\nfunction qr_image(text, options) {\n  options = get_options(options);\n  var matrix = QR(text, options.ec_level, options.parse_url);\n  var stream = new Readable();\n  stream._read = fn_noop;\n\n  switch (options.type) {\n    case 'svg':\n    case 'pdf':\n    case 'eps':\n      process.nextTick(function () {\n        vector[options.type](matrix, stream, options.margin, options.size);\n      });\n      break;\n\n    case 'svgpath':\n      // deprecated, use svg_object method\n      process.nextTick(function () {\n        var obj = vector.svg_object(matrix, options.margin, options.size);\n        stream.push(obj.path);\n        stream.push(null);\n      });\n      break;\n\n    case 'png':\n    default:\n      process.nextTick(function () {\n        var bitmap = png.bitmap(matrix, options.size, options.margin);\n\n        if (options.customize) {\n          options.customize(bitmap);\n        }\n\n        png.png(bitmap, stream);\n      });\n  }\n\n  return stream;\n}\n\nfunction qr_image_sync(text, options) {\n  options = get_options(options);\n  var matrix = QR(text, options.ec_level, options.parse_url);\n  var stream = [];\n  var result;\n\n  switch (options.type) {\n    case 'svg':\n    case 'pdf':\n    case 'eps':\n      vector[options.type](matrix, stream, options.margin, options.size);\n      result = stream.filter(Boolean).join('');\n      break;\n\n    case 'png':\n    default:\n      var bitmap = png.bitmap(matrix, options.size, options.margin);\n\n      if (options.customize) {\n        options.customize(bitmap);\n      }\n\n      png.png(bitmap, stream);\n      result = Buffer.concat(stream.filter(Boolean));\n  }\n\n  return result;\n}\n\nfunction svg_object(text, options) {\n  options = get_options(options, 'svg');\n  var matrix = QR(text, options.ec_level);\n  return vector.svg_object(matrix, options.margin);\n}\n\nmodule.exports = {\n  matrix: QR,\n  image: qr_image,\n  imageSync: qr_image_sync,\n  svgObject: svg_object\n};","map":null,"metadata":{},"sourceType":"script"}