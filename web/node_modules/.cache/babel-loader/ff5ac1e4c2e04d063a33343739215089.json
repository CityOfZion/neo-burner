{"ast":null,"code":"\"use strict\";\n\nvar zlib = require('zlib');\n\nvar crc32 = require('./crc32');\n\nvar PNG_HEAD = new Buffer([137, 80, 78, 71, 13, 10, 26, 10]);\nvar PNG_IHDR = new Buffer([0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0]);\nvar PNG_IDAT = new Buffer([0, 0, 0, 0, 73, 68, 65, 84]);\nvar PNG_IEND = new Buffer([0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);\n\nfunction png(bitmap, stream) {\n  stream.push(PNG_HEAD);\n  var IHDR = Buffer.concat([PNG_IHDR]);\n  IHDR.writeUInt32BE(bitmap.size, 8);\n  IHDR.writeUInt32BE(bitmap.size, 12);\n  IHDR.writeUInt32BE(crc32(IHDR.slice(4, -4)), 21);\n  stream.push(IHDR);\n  var IDAT = Buffer.concat([PNG_IDAT, zlib.deflateSync(bitmap.data, {\n    level: 9\n  }), new Buffer(4)]);\n  IDAT.writeUInt32BE(IDAT.length - 12, 0);\n  IDAT.writeUInt32BE(crc32(IDAT.slice(4, -4)), IDAT.length - 4);\n  stream.push(IDAT);\n  stream.push(PNG_IEND);\n  stream.push(null);\n}\n\nfunction bitmap(matrix, size, margin) {\n  var N = matrix.length;\n  var X = (N + 2 * margin) * size;\n  var data = new Buffer((X + 1) * X);\n  data.fill(255);\n\n  for (var i = 0; i < X; i++) {\n    data[i * (X + 1)] = 0;\n  }\n\n  for (var i = 0; i < N; i++) {\n    for (var j = 0; j < N; j++) {\n      if (matrix[i][j]) {\n        var offset = ((margin + i) * (X + 1) + (margin + j)) * size + 1;\n        data.fill(0, offset, offset + size);\n\n        for (var c = 1; c < size; c++) {\n          data.copy(data, offset + c * (X + 1), offset, offset + size);\n        }\n      }\n    }\n  }\n\n  return {\n    data: data,\n    size: X\n  };\n}\n\nmodule.exports = {\n  bitmap: bitmap,\n  png: png\n};","map":null,"metadata":{},"sourceType":"script"}